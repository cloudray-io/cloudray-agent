syntax = "proto3";
package cloudray.agent.a2o;
option ruby_package = "AgentPb::A2o";

message Version {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
}

enum ErrorType {
  ERROR_UNKNOWN = 0;
}

message Error {
  ErrorType error_type = 1;
  string error_description = 2;
}

message AuthRequestToken {
  string reg_code = 1;
  string machine_uid = 2;
  string machine_name = 3;
  Version agent_version = 4;

  // full list: https://doc.rust-lang.org/std/env/consts/constant.OS.html
  // can be empty (e.g., for WASM)
  string os_family = 11;
  // full list: https://doc.rust-lang.org/std/env/consts/constant.OS.html
  // can be empty (e.g., for WASM)
  string os_name = 12;
  string os_distro = 13;
  string os_version = 14;
  // full list: https://doc.rust-lang.org/std/env/consts/constant.ARCH.html
  string os_arch = 15;
}

enum MetricType {
  METRIC_UNKNOWN = 0;

  METRIC_CPU_GLOBAL_PERCENT = 11;

  METRIC_MEMORY_TOTAL_BYTES = 21;
  METRIC_MEMORY_USED_BYTES = 22;
}

// Why not separate messages like "CpuMetric", "DiskMetric" etc.?
// The intention is keep the schema as flat as possible to keep it simple (from communication to storage to querying).
message MetricEvent {
  MetricType metric_type = 1;
  uint64 metric_at_ts = 2;
  // for CPUs, label can be "CPU 0", "CPU 1" etc.
  // for disks, label can be disk mount point etc.
  string label = 3;
  double value = 4;
}

message RunlogStarted {
  uint64 runlog_id = 1;
  uint64 started_at_ts = 2;
}

enum RunlogFailReason {
  RFR_UNKNOWN = 0;

  RFR_TIMEOUT = 1;
}

message RunlogFailed {
  uint64 runlog_id = 1;
  uint64 failed_at_ts = 2;
  RunlogFailReason fail_reason = 3;
}

message RunlogFinished {
  uint64 runlog_id = 1;
  uint64 finished_at_ts = 2;
  int32 exit_code = 3;
}

enum OutputStreamType {
  OST_STDOUT = 0;
  OST_STDERR = 1;
}

message RunlogOutputFragment {
  uint64 runlog_id = 1;
  uint64 output_at_ts = 2;
  OutputStreamType stream_type = 3;
  bytes output_fragment = 4;
}

message A2oMessage {
  oneof a2o_payload {
    // Unauthenticated messages (range from 101 - 199)
    AuthRequestToken auth_request_token = 101;

    // Authenticated messages (range from 200 onwards)
    Error error = 200;

    // Runlog messages
    RunlogStarted runlog_started = 201;
    RunlogOutputFragment runlog_output_fragment = 202;
    RunlogFailed runlog_failed = 203;
    RunlogFinished runlog_finished = 204;

    // Metrics
    MetricEvent metric_event = 401;
  }
}

message A2oRoot {
  string agent_token = 1;

  repeated A2oMessage messages = 11;
}
