// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Version {
    #[prost(uint32, tag = "1")]
    pub major: u32,
    #[prost(uint32, tag = "2")]
    pub minor: u32,
    #[prost(uint32, tag = "3")]
    pub patch: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(enumeration = "ErrorType", tag = "1")]
    pub error_type: i32,
    #[prost(string, tag = "2")]
    pub error_description: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequestToken {
    #[prost(string, tag = "1")]
    pub reg_code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub machine_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub machine_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub agent_version: ::core::option::Option<Version>,
    /// full list: <https://doc.rust-lang.org/std/env/consts/constant.ARCH.html>
    #[prost(string, tag = "11")]
    pub os_arch: ::prost::alloc::string::String,
    /// full list: <https://doc.rust-lang.org/std/env/consts/constant.FAMILY.html>
    /// can be empty (e.g., for WASM)
    #[prost(string, tag = "12")]
    pub os_family: ::prost::alloc::string::String,
    /// full list: <https://doc.rust-lang.org/std/env/consts/constant.OS.html>
    /// can be empty (e.g., for WASM)
    #[prost(string, tag = "13")]
    pub os_name: ::prost::alloc::string::String,
    /// In Linux, value of "ID" from /etc/os-release
    /// see <https://docs.rs/sysinfo/latest/sysinfo/struct.System.html#method.distribution_id>
    #[prost(string, tag = "14")]
    pub os_distro: ::prost::alloc::string::String,
    /// In Linux, value of "VERSION_ID" from /etc/os-release
    /// see <https://docs.rs/sysinfo/latest/sysinfo/struct.System.html#method.os_version>
    #[prost(string, tag = "15")]
    pub os_version: ::prost::alloc::string::String,
    /// <https://docs.rs/sysinfo/latest/sysinfo/struct.System.html#method.long_os_version>
    #[prost(string, tag = "16")]
    pub os_version_long: ::prost::alloc::string::String,
}
/// Why not separate messages like "CpuMetric", "DiskMetric" etc.?
/// The intention is keep the schema as flat as possible to keep it simple (from communication to storage to querying).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricEvent {
    #[prost(enumeration = "MetricType", tag = "1")]
    pub metric_type: i32,
    #[prost(uint64, tag = "2")]
    pub metric_at_ts: u64,
    /// for CPUs, label can be "CPU 0", "CPU 1" etc.
    /// for disks, label can be disk mount point etc.
    #[prost(string, tag = "3")]
    pub label: ::prost::alloc::string::String,
    #[prost(double, tag = "4")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RunlogStarted {
    #[prost(uint64, tag = "1")]
    pub runlog_id: u64,
    #[prost(uint64, tag = "2")]
    pub started_at_ts: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RunlogFailed {
    #[prost(uint64, tag = "1")]
    pub runlog_id: u64,
    #[prost(uint64, tag = "2")]
    pub failed_at_ts: u64,
    #[prost(enumeration = "RunlogFailReason", tag = "3")]
    pub fail_reason: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RunlogFinished {
    #[prost(uint64, tag = "1")]
    pub runlog_id: u64,
    #[prost(uint64, tag = "2")]
    pub finished_at_ts: u64,
    #[prost(int32, tag = "3")]
    pub exit_code: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunlogOutputFragment {
    #[prost(uint64, tag = "1")]
    pub runlog_id: u64,
    #[prost(uint64, tag = "2")]
    pub output_at_ts: u64,
    #[prost(enumeration = "OutputStreamType", tag = "3")]
    pub stream_type: i32,
    #[prost(bytes = "vec", tag = "4")]
    pub output_fragment: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct A2oMessage {
    #[prost(
        oneof = "a2o_message::A2oPayload",
        tags = "101, 200, 201, 202, 203, 204, 401"
    )]
    pub a2o_payload: ::core::option::Option<a2o_message::A2oPayload>,
}
/// Nested message and enum types in `A2oMessage`.
pub mod a2o_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum A2oPayload {
        /// Unauthenticated messages (range from 101 - 199)
        #[prost(message, tag = "101")]
        AuthRequestToken(super::AuthRequestToken),
        /// Authenticated messages (range from 200 onwards)
        #[prost(message, tag = "200")]
        Error(super::Error),
        /// Runlog messages
        #[prost(message, tag = "201")]
        RunlogStarted(super::RunlogStarted),
        #[prost(message, tag = "202")]
        RunlogOutputFragment(super::RunlogOutputFragment),
        #[prost(message, tag = "203")]
        RunlogFailed(super::RunlogFailed),
        #[prost(message, tag = "204")]
        RunlogFinished(super::RunlogFinished),
        /// Metrics
        #[prost(message, tag = "401")]
        MetricEvent(super::MetricEvent),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct A2oRoot {
    #[prost(string, tag = "1")]
    pub agent_token: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "11")]
    pub messages: ::prost::alloc::vec::Vec<A2oMessage>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorType {
    ErrorUnknown = 0,
}
impl ErrorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ErrorUnknown => "ERROR_UNKNOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_UNKNOWN" => Some(Self::ErrorUnknown),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MetricType {
    MetricUnknown = 0,
    MetricCpuGlobalPercent = 11,
    MetricMemoryTotalBytes = 21,
    MetricMemoryUsedBytes = 22,
}
impl MetricType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MetricUnknown => "METRIC_UNKNOWN",
            Self::MetricCpuGlobalPercent => "METRIC_CPU_GLOBAL_PERCENT",
            Self::MetricMemoryTotalBytes => "METRIC_MEMORY_TOTAL_BYTES",
            Self::MetricMemoryUsedBytes => "METRIC_MEMORY_USED_BYTES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "METRIC_UNKNOWN" => Some(Self::MetricUnknown),
            "METRIC_CPU_GLOBAL_PERCENT" => Some(Self::MetricCpuGlobalPercent),
            "METRIC_MEMORY_TOTAL_BYTES" => Some(Self::MetricMemoryTotalBytes),
            "METRIC_MEMORY_USED_BYTES" => Some(Self::MetricMemoryUsedBytes),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RunlogFailReason {
    RfrUnknown = 0,
    RfrTimeout = 1,
}
impl RunlogFailReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RfrUnknown => "RFR_UNKNOWN",
            Self::RfrTimeout => "RFR_TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RFR_UNKNOWN" => Some(Self::RfrUnknown),
            "RFR_TIMEOUT" => Some(Self::RfrTimeout),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OutputStreamType {
    OstStdout = 0,
    OstStderr = 1,
}
impl OutputStreamType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::OstStdout => "OST_STDOUT",
            Self::OstStderr => "OST_STDERR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OST_STDOUT" => Some(Self::OstStdout),
            "OST_STDERR" => Some(Self::OstStderr),
            _ => None,
        }
    }
}
